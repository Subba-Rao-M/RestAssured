###############
REST ASSURED
###############

Rest Assured is an API/Library which supports automation of Rest API's

Pre-Requisites
#############
Java 9+ 
Eclipse
Test NG
Maven
Cucumber no need to add separately as Rest assured supports by default BDD syntax
Group ID - Project Name
Artifact ID - Package Name

Dependencies:

https://github.com/rest-assured/rest-assured/wiki/GettingStarted

REST Assured, 
JsonPath
XmlPath
JSON Schema Validation
json
gson
testng
scribejava-apis
json-schema-validator
xml-schema-validator

Http Requests -- > Get, Post, Put and Delete mainly

Gherkin Keywords --> Given, when and then based on BDD reference, which are basically methods

Automation script can be devided into three parts:

given() ---------> What are the pre-requisites -- headers, cookies, authoriztion, body, query and path parameters. Given can be ignored and FIrst method will not have .
.when() --------------> Request type given here like get, put, post and delete
.then() -----------> All validations are given here like status code, response time, response body, cookie and headers

Import static page for above: Refer Static imports in above rest assured documentations

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

https://reqres.in/api/users/2

https://reqres.in/api/users

{
    "name": "morpheus",
    "job": "leader"
}



https://reqres.in/api/users?page=2&id=5 --- api and users is path parameters and after ? page =2 and id = 5 is query parameter

Parsing Response Body:
Add dependencies in pom.xml json, gson jsonpath, xmlpath





Rest Assured Framework development:
Framework objectives:
Re-usability
Maintainability
Readability 

Phases of framework development:

1. Understand the requirement using functional specification and swaggers
2. Choose automation tool --> ex: rest assured library based on budget, skillset and type of applications and POC
3. Design Framework --> Folder structure, what kind of files
4. Develop the codes
5. Execute the test cases


Framework Structure:

End Points -------------> Test Cases ---------------> TestNg.xml ----- > POM.xml --- > Git/GitHub --> Jenkins

							|								|												|
							
Proprties		Payloads 		Utilities  Test Data		Reports	                 <--------------------------							


Create Maven project
Update required dependencies to download reqiured jar files


src/test/java
api.endpoints --> Route file/ or refer from properties and module specific end point files
	route.java -- > contains only urls
	UserEndPoints.java --> User specific end points CRUD methods are created here
api.payload ----> Pojo classes
api.test ---> test cases
api.utilities --> data providers, excel/json data readers / extent reports config
	Excel Utility
	Data Providers
	Extent Reports -- add extentreportmanager and listener in testng.xml file
src/test/resources
route.properties
test data
Configuring logs -- > add dependencies for api and core for org.apache.logging.log4j and create log4j2.xml

